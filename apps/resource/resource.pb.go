// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: apps/resource/pb/resource.proto

package resource

import (
	request "github.com/infraboard/mcube/http/request"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VENDOR int32

const (
	VENDOR_ALIYUN  VENDOR = 0
	VENDOR_TENCENT VENDOR = 1
	VENDOR_HUAWEI  VENDOR = 2
	VENDOR_VSPHERE VENDOR = 3
	VENDOR_AMAZON  VENDOR = 4
)

// Enum value maps for VENDOR.
var (
	VENDOR_name = map[int32]string{
		0: "ALIYUN",
		1: "TENCENT",
		2: "HUAWEI",
		3: "VSPHERE",
		4: "AMAZON",
	}
	VENDOR_value = map[string]int32{
		"ALIYUN":  0,
		"TENCENT": 1,
		"HUAWEI":  2,
		"VSPHERE": 3,
		"AMAZON":  4,
	}
)

func (x VENDOR) Enum() *VENDOR {
	p := new(VENDOR)
	*p = x
	return p
}

func (x VENDOR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VENDOR) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_resource_pb_resource_proto_enumTypes[0].Descriptor()
}

func (VENDOR) Type() protoreflect.EnumType {
	return &file_apps_resource_pb_resource_proto_enumTypes[0]
}

func (x VENDOR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VENDOR.Descriptor instead.
func (VENDOR) EnumDescriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{0}
}

type TYPE int32

const (
	// 业务资源
	TYPE_HOST    TYPE = 0
	TYPE_RDS     TYPE = 1
	TYPE_REDIS   TYPE = 2
	TYPE_BUCKET  TYPE = 3
	TYPE_DISK    TYPE = 4
	TYPE_LB      TYPE = 5
	TYPE_DOMAIN  TYPE = 6
	TYPE_EIP     TYPE = 7
	TYPE_MONGODB TYPE = 8
	// 子资源
	TYPE_DATABASE TYPE = 100
	TYPE_ACCOUNT  TYPE = 101
	// 未知资源
	TYPE_OTHER TYPE = 199
	// 辅助资源
	TYPE_BILL  TYPE = 200
	TYPE_ORDER TYPE = 201
)

// Enum value maps for TYPE.
var (
	TYPE_name = map[int32]string{
		0:   "HOST",
		1:   "RDS",
		2:   "REDIS",
		3:   "BUCKET",
		4:   "DISK",
		5:   "LB",
		6:   "DOMAIN",
		7:   "EIP",
		8:   "MONGODB",
		100: "DATABASE",
		101: "ACCOUNT",
		199: "OTHER",
		200: "BILL",
		201: "ORDER",
	}
	TYPE_value = map[string]int32{
		"HOST":     0,
		"RDS":      1,
		"REDIS":    2,
		"BUCKET":   3,
		"DISK":     4,
		"LB":       5,
		"DOMAIN":   6,
		"EIP":      7,
		"MONGODB":  8,
		"DATABASE": 100,
		"ACCOUNT":  101,
		"OTHER":    199,
		"BILL":     200,
		"ORDER":    201,
	}
)

func (x TYPE) Enum() *TYPE {
	p := new(TYPE)
	*p = x
	return p
}

func (x TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_resource_pb_resource_proto_enumTypes[1].Descriptor()
}

func (TYPE) Type() protoreflect.EnumType {
	return &file_apps_resource_pb_resource_proto_enumTypes[1]
}

func (x TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TYPE.Descriptor instead.
func (TYPE) EnumDescriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{1}
}

type PayMode int32

const (
	// 预付费, 包年包月
	PayMode_PRE_PAY PayMode = 0
	// 按需
	PayMode_POST_PAY PayMode = 1
	// 预定
	PayMode_RESERVED_PAY PayMode = 2
	// 没有标识
	PayMode_NULL PayMode = 9
)

// Enum value maps for PayMode.
var (
	PayMode_name = map[int32]string{
		0: "PRE_PAY",
		1: "POST_PAY",
		2: "RESERVED_PAY",
		9: "NULL",
	}
	PayMode_value = map[string]int32{
		"PRE_PAY":      0,
		"POST_PAY":     1,
		"RESERVED_PAY": 2,
		"NULL":         9,
	}
)

func (x PayMode) Enum() *PayMode {
	p := new(PayMode)
	*p = x
	return p
}

func (x PayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_resource_pb_resource_proto_enumTypes[2].Descriptor()
}

func (PayMode) Type() protoreflect.EnumType {
	return &file_apps_resource_pb_resource_proto_enumTypes[2]
}

func (x PayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayMode.Descriptor instead.
func (PayMode) EnumDescriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{2}
}

// 使用方式
type UsageMode int32

const (
	// 共享使用
	UsageMode_SHARED UsageMode = 0
	// 独占使用
	UsageMode_MONOPOLY UsageMode = 1
)

// Enum value maps for UsageMode.
var (
	UsageMode_name = map[int32]string{
		0: "SHARED",
		1: "MONOPOLY",
	}
	UsageMode_value = map[string]int32{
		"SHARED":   0,
		"MONOPOLY": 1,
	}
)

func (x UsageMode) Enum() *UsageMode {
	p := new(UsageMode)
	*p = x
	return p
}

func (x UsageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_resource_pb_resource_proto_enumTypes[3].Descriptor()
}

func (UsageMode) Type() protoreflect.EnumType {
	return &file_apps_resource_pb_resource_proto_enumTypes[3]
}

func (x UsageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageMode.Descriptor instead.
func (UsageMode) EnumDescriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{3}
}

// 标签用途
type TAG_PURPOSE int32

const (
	// 用于资源分组
	TAG_PURPOSE_GROUP TAG_PURPOSE = 0
	// 系统使用标签, 表示被其他系统引用, 比如应用关联标签
	TAG_PURPOSE_SYSTEM TAG_PURPOSE = 1
	// 用于资源监控
	TAG_PURPOSE_MONITOR TAG_PURPOSE = 2
)

// Enum value maps for TAG_PURPOSE.
var (
	TAG_PURPOSE_name = map[int32]string{
		0: "GROUP",
		1: "SYSTEM",
		2: "MONITOR",
	}
	TAG_PURPOSE_value = map[string]int32{
		"GROUP":   0,
		"SYSTEM":  1,
		"MONITOR": 2,
	}
)

func (x TAG_PURPOSE) Enum() *TAG_PURPOSE {
	p := new(TAG_PURPOSE)
	*p = x
	return p
}

func (x TAG_PURPOSE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TAG_PURPOSE) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_resource_pb_resource_proto_enumTypes[4].Descriptor()
}

func (TAG_PURPOSE) Type() protoreflect.EnumType {
	return &file_apps_resource_pb_resource_proto_enumTypes[4]
}

func (x TAG_PURPOSE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TAG_PURPOSE.Descriptor instead.
func (TAG_PURPOSE) EnumDescriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{4}
}

type UpdateAction int32

const (
	// 添加
	UpdateAction_ADD UpdateAction = 0
	// 移除
	UpdateAction_REMOVE UpdateAction = 1
)

// Enum value maps for UpdateAction.
var (
	UpdateAction_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
	}
	UpdateAction_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
	}
)

func (x UpdateAction) Enum() *UpdateAction {
	p := new(UpdateAction)
	*p = x
	return p
}

func (x UpdateAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateAction) Descriptor() protoreflect.EnumDescriptor {
	return file_apps_resource_pb_resource_proto_enumTypes[5].Descriptor()
}

func (UpdateAction) Type() protoreflect.EnumType {
	return &file_apps_resource_pb_resource_proto_enumTypes[5]
}

func (x UpdateAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateAction.Descriptor instead.
func (UpdateAction) EnumDescriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{5}
}

type ResourceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"total"
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	// @gotags: json:"items"
	Items []*Resource `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ResourceSet) Reset() {
	*x = ResourceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSet) ProtoMessage() {}

func (x *ResourceSet) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSet.ProtoReflect.Descriptor instead.
func (*ResourceSet) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceSet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ResourceSet) GetItems() []*Resource {
	if x != nil {
		return x.Items
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源元数据信息
	// @gotags: json:"meta"
	Meta *Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	// 资源规格信息
	// @gotags: json:"spec"
	Spec *Spec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec"`
	// 资源费用
	// @gotags: json:"cost"
	Cost *Cost `protobuf:"bytes,3,opt,name=cost,proto3" json:"cost"`
	// 资源状态
	// @gotags: json:"status"
	Status *Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status"`
	// 资源标签
	// @gotags: json:"tags"
	Tags []*Tag `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags"`
	// 关联资源
	// @gotags: json:"related_resources"
	RelatedResources []*Resource `protobuf:"bytes,6,rep,name=related_resources,json=relatedResources,proto3" json:"related_resources"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{1}
}

func (x *Resource) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Resource) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Resource) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Resource) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Resource) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Resource) GetRelatedResources() []*Resource {
	if x != nil {
		return x.RelatedResources
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 全局唯一Id, 直接使用个云商自己的Id
	// @gotags: json:"id" validate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required"`
	// 资源所属域
	// @gotags: json:"domain" validate:"required"
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain" validate:"required"`
	// 资源所属空间
	// @gotags: json:"namespace" validate:"required"
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace" validate:"required"`
	// 资源所属环境
	// @gotags: json:"env"
	Env string `protobuf:"bytes,4,opt,name=env,proto3" json:"env"`
	// 同步时间
	// @gotags: json:"sync_at" validate:"required"
	SyncAt int64 `protobuf:"varint,5,opt,name=sync_at,json=syncAt,proto3" json:"sync_at" validate:"required"`
	// 用于同步的凭证ID
	// @gotags: json:"credential_id"
	CredentialId string `protobuf:"bytes,6,opt,name=credential_id,json=credentialId,proto3" json:"credential_id"`
	// 创建时间
	// @gotags: json:"create_at"
	CreateAt int64 `protobuf:"varint,7,opt,name=create_at,json=createAt,proto3" json:"create_at"`
	// 序列号
	// @gotags: json:"serial_number"
	SerialNumber string `protobuf:"bytes,9,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number"`
	// 基础数据Hash
	// @gotags: json:"resource_hash"
	ResourceHash string `protobuf:"bytes,10,opt,name=resource_hash,json=resourceHash,proto3" json:"resource_hash"`
	// 描述数据Hash
	// @gotags: json:"describe_hash"
	DescribeHash string `protobuf:"bytes,11,opt,name=describe_hash,json=describeHash,proto3" json:"describe_hash"`
	// 使用方式
	// @gotags: json:"usage_mode"
	UsageMode UsageMode `protobuf:"varint,12,opt,name=usage_mode,json=usageMode,proto3,enum=infraboard.cmdb.resource.UsageMode" json:"usage_mode"`
	// 共享策略, 当一个资源被多个应用共享时, 可以指定允许的应用
	// @gotags: json:"shared_policy"
	SharedPolicy *SharedPolicy `protobuf:"bytes,13,opt,name=shared_policy,json=sharedPolicy,proto3" json:"shared_policy"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{2}
}

func (x *Meta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Meta) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Meta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Meta) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *Meta) GetSyncAt() int64 {
	if x != nil {
		return x.SyncAt
	}
	return 0
}

func (x *Meta) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *Meta) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Meta) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Meta) GetResourceHash() string {
	if x != nil {
		return x.ResourceHash
	}
	return ""
}

func (x *Meta) GetDescribeHash() string {
	if x != nil {
		return x.DescribeHash
	}
	return ""
}

func (x *Meta) GetUsageMode() UsageMode {
	if x != nil {
		return x.UsageMode
	}
	return UsageMode_SHARED
}

func (x *Meta) GetSharedPolicy() *SharedPolicy {
	if x != nil {
		return x.SharedPolicy
	}
	return nil
}

// 共享策略
type SharedPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分享的维度
	// @gotags: json:"tag_key"
	TagKey string `protobuf:"bytes,1,opt,name=tag_key,json=tagKey,proto3" json:"tag_key"`
	// 分享给哪些值
	// @gotags: json:"tag_values"
	TagValues []string `protobuf:"bytes,2,rep,name=tag_values,json=tagValues,proto3" json:"tag_values"`
}

func (x *SharedPolicy) Reset() {
	*x = SharedPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedPolicy) ProtoMessage() {}

func (x *SharedPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedPolicy.ProtoReflect.Descriptor instead.
func (*SharedPolicy) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{3}
}

func (x *SharedPolicy) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

func (x *SharedPolicy) GetTagValues() []string {
	if x != nil {
		return x.TagValues
	}
	return nil
}

type Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 厂商
	// @gotags: json:"vendor"
	Vendor VENDOR `protobuf:"varint,1,opt,name=vendor,proto3,enum=infraboard.cmdb.resource.VENDOR" json:"vendor"`
	// 资源类型
	// @gotags: json:"resource_type"
	ResourceType TYPE `protobuf:"varint,2,opt,name=resource_type,json=resourceType,proto3,enum=infraboard.cmdb.resource.TYPE" json:"resource_type"`
	// 地域
	// @gotags: json:"region"
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region"`
	// 区域
	// @gotags: json:"zone"
	Zone string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone"`
	// 资源所属账号
	// @gotags: json:"owner"
	Owner string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner"`
	// 名称
	// @gotags: json:"name"
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name"`
	// 种类
	// @gotags: json:"category"
	Category string `protobuf:"bytes,7,opt,name=category,proto3" json:"category"`
	// 规格
	// @gotags: json:"type"
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type"`
	// 描述
	// @gotags: json:"description"
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description"`
	// 过期时间
	// @gotags: json:"expire_at"
	ExpireAt int64 `protobuf:"varint,10,opt,name=expire_at,json=expireAt,proto3" json:"expire_at"`
	// 更新时间
	// @gotags: json:"update_at"
	UpdateAt int64 `protobuf:"varint,11,opt,name=update_at,json=updateAt,proto3" json:"update_at"`
	// 是否开启实例释放保护
	// @gotags: json:"release_protection"
	ReleaseProtection *bool `protobuf:"varint,12,opt,name=release_protection,json=releaseProtection,proto3,oneof" json:"release_protection"`
	// 资源占用Cpu数量
	// @gotags: json:"cpu"
	Cpu int32 `protobuf:"varint,15,opt,name=cpu,proto3" json:"cpu"`
	// GPU数量
	// @gotags: json:"gpu"
	Gpu int32 `protobuf:"varint,16,opt,name=gpu,proto3" json:"gpu"`
	// 资源使用的内存
	// @gotags: json:"memory"
	Memory int32 `protobuf:"varint,17,opt,name=memory,proto3" json:"memory"`
	// 资源使用的存储
	// @gotags: json:"storage"
	Storage int32 `protobuf:"varint,18,opt,name=storage,proto3" json:"storage"`
	// 公网IP带宽, 单位M
	// @gotags: json:"band_width"
	BandWidth int32 `protobuf:"varint,19,opt,name=band_width,json=bandWidth,proto3" json:"band_width"`
	// 额外的通用属性
	// @gotags: json:"extra"
	Extra map[string]string `protobuf:"bytes,26,rep,name=extra,proto3" json:"extra" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Spec) Reset() {
	*x = Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{4}
}

func (x *Spec) GetVendor() VENDOR {
	if x != nil {
		return x.Vendor
	}
	return VENDOR_ALIYUN
}

func (x *Spec) GetResourceType() TYPE {
	if x != nil {
		return x.ResourceType
	}
	return TYPE_HOST
}

func (x *Spec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Spec) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Spec) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Spec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spec) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Spec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Spec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Spec) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *Spec) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Spec) GetReleaseProtection() bool {
	if x != nil && x.ReleaseProtection != nil {
		return *x.ReleaseProtection
	}
	return false
}

func (x *Spec) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Spec) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *Spec) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Spec) GetStorage() int32 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *Spec) GetBandWidth() int32 {
	if x != nil {
		return x.BandWidth
	}
	return 0
}

func (x *Spec) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// 资源当前状态
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源当前状态
	// @gotags: json:"phase"
	Phase string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase"`
	// 实例锁定模式; Unlock：正常；ManualLock：手动触发锁定；LockByExpiration：实例过期自动锁定；LockByRestoration：实例回滚前的自动锁定；LockByDiskQuota：实例空间满自动锁定
	// @gotags: json:"lock_mode"
	LockMode string `protobuf:"bytes,2,opt,name=lock_mode,json=lockMode,proto3" json:"lock_mode"`
	// 锁定原因
	// @gotags: json:"lock_reason"
	LockReason string `protobuf:"bytes,3,opt,name=lock_reason,json=lockReason,proto3" json:"lock_reason"`
	// 资源访问地址
	// 公网IP, 或者域名
	// @gotags: json:"public_ip"
	PublicIp []string `protobuf:"bytes,4,rep,name=public_ip,json=publicIp,proto3" json:"public_ip"`
	// 内网IP, 或者域名
	// @gotags: json:"private_ip"
	PrivateIp []string `protobuf:"bytes,5,rep,name=private_ip,json=privateIp,proto3" json:"private_ip"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{5}
}

func (x *Status) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *Status) GetLockMode() string {
	if x != nil {
		return x.LockMode
	}
	return ""
}

func (x *Status) GetLockReason() string {
	if x != nil {
		return x.LockReason
	}
	return ""
}

func (x *Status) GetPublicIp() []string {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *Status) GetPrivateIp() []string {
	if x != nil {
		return x.PrivateIp
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标签的类型
	// @gotags: json:"purpose"
	Purpose TAG_PURPOSE `protobuf:"varint,1,opt,name=purpose,proto3,enum=infraboard.cmdb.resource.TAG_PURPOSE" json:"purpose"`
	// 标签的Key
	// @gotags: json:"key" validate:"lte=255,required"
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key" validate:"lte=255,required"`
	// 标签的值
	// @gotags: json:"value" validate:"lte=255,required"
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value" validate:"lte=255,required"`
	// 标签的值的描述, 通常用于展示
	// @gotags: json:"describe"
	Describe string `protobuf:"bytes,4,opt,name=describe,proto3" json:"describe"`
	// 标签权重, 针对同一个key, 多个value场景, 默认值1
	// @gotags: json:"weight"
	Weight int64 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight"`
	// 是否是只读标签
	// @gotags: json:"read_only"
	ReadOnly bool `protobuf:"varint,6,opt,name=read_only,json=readOnly,proto3" json:"read_only"`
	// 标签是否隐藏, 用于控制是否在前端展示
	// @gotags: json:"hidden"
	Hidden bool `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden"`
	// 标签meta信息, 比如前端需要设置标签的颜色
	// @gotags: json:"meta"
	Meta map[string]string `protobuf:"bytes,15,rep,name=meta,proto3" json:"meta" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{6}
}

func (x *Tag) GetPurpose() TAG_PURPOSE {
	if x != nil {
		return x.Purpose
	}
	return TAG_PURPOSE_GROUP
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tag) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Tag) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Tag) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Tag) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Tag) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type TagSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"total"
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	// @gotags: json:"items"
	Items []*Tag `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *TagSet) Reset() {
	*x = TagSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSet) ProtoMessage() {}

func (x *TagSet) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSet.ProtoReflect.Descriptor instead.
func (*TagSet) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{7}
}

func (x *TagSet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagSet) GetItems() []*Tag {
	if x != nil {
		return x.Items
	}
	return nil
}

// 资产价格, 包年包月 记录月
type Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例付费方式
	// @gotags: json:"pay_mode"
	PayMode PayMode `protobuf:"varint,1,opt,name=pay_mode,json=payMode,proto3,enum=infraboard.cmdb.resource.PayMode" json:"pay_mode"`
	// 付费方式详情
	// @gotags: json:"pay_mode_detail"
	PayModeDetail string `protobuf:"bytes,2,opt,name=pay_mode_detail,json=payModeDetail,proto3" json:"pay_mode_detail"`
	// 官网价,原价（分）
	// @gotags: json:"sale_price"
	SalePrice float64 `protobuf:"fixed64,3,opt,name=sale_price,json=salePrice,proto3" json:"sale_price"`
	// 实际支付金额（分）
	// @gotags: json:"real_cost"
	RealCost float64 `protobuf:"fixed64,4,opt,name=real_cost,json=realCost,proto3" json:"real_cost"`
	// 折扣率
	// @gotags: json:"policy"
	Policy float64 `protobuf:"fixed64,5,opt,name=policy,proto3" json:"policy"`
	// 单价（分）
	// @gotags: json:"unit_price"
	UnitPrice float64 `protobuf:"fixed64,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price"`
}

func (x *Cost) Reset() {
	*x = Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{8}
}

func (x *Cost) GetPayMode() PayMode {
	if x != nil {
		return x.PayMode
	}
	return PayMode_PRE_PAY
}

func (x *Cost) GetPayModeDetail() string {
	if x != nil {
		return x.PayModeDetail
	}
	return ""
}

func (x *Cost) GetSalePrice() float64 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *Cost) GetRealCost() float64 {
	if x != nil {
		return x.RealCost
	}
	return 0
}

func (x *Cost) GetPolicy() float64 {
	if x != nil {
		return x.Policy
	}
	return 0
}

func (x *Cost) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	// @gotags: json:"page"
	Page *request.PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	// 资源所属域
	// @gotags: json:"domain"
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain"`
	// 资源所属空间
	// @gotags: json:"namespace"
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace"`
	// 资源所属环境
	// @gotags: json:"env"
	Env string `protobuf:"bytes,4,opt,name=env,proto3" json:"env"`
	// 使用方式
	// @gotags: json:"usage_mode"
	UsageMode *UsageMode `protobuf:"varint,5,opt,name=usage_mode,json=usageMode,proto3,enum=infraboard.cmdb.resource.UsageMode,oneof" json:"usage_mode"`
	// 厂商
	// @gotags: json:"vendor"
	Vendor *VENDOR `protobuf:"varint,6,opt,name=vendor,proto3,enum=infraboard.cmdb.resource.VENDOR,oneof" json:"vendor"`
	// 资源所属账号
	// @gotags: json:"owner"
	Owner string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner"`
	// 资源类型
	// @gotags: json:"type"
	Type *TYPE `protobuf:"varint,8,opt,name=type,proto3,enum=infraboard.cmdb.resource.TYPE,oneof" json:"type"`
	// 服务商中的状态
	// @gotags: json:"status"
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status"`
	// 资源标签
	// @gotags: json:"tags"
	Tags []*TagSelector `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags"`
	// 是否返回资源的标签
	// @gotags: json:"with_tags"
	WithTags bool `protobuf:"varint,11,opt,name=with_tags,json=withTags,proto3" json:"with_tags"`
	// 关联资源查询深度, -1表示查询所有, 默认为0,表示不查询关联资源
	// @gotags: json:"relation_deep"
	RelationDeep int32 `protobuf:"varint,12,opt,name=relation_deep,json=relationDeep,proto3" json:"relation_deep"`
	// 关键字参数
	// @gotags: json:"keywords"
	Keywords string `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords"`
	// 是否精确匹配
	// @gotags: json:"exact_match"
	ExactMatch bool `protobuf:"varint,15,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{9}
}

func (x *SearchRequest) GetPage() *request.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SearchRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SearchRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SearchRequest) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *SearchRequest) GetUsageMode() UsageMode {
	if x != nil && x.UsageMode != nil {
		return *x.UsageMode
	}
	return UsageMode_SHARED
}

func (x *SearchRequest) GetVendor() VENDOR {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return VENDOR_ALIYUN
}

func (x *SearchRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SearchRequest) GetType() TYPE {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TYPE_HOST
}

func (x *SearchRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SearchRequest) GetTags() []*TagSelector {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SearchRequest) GetWithTags() bool {
	if x != nil {
		return x.WithTags
	}
	return false
}

func (x *SearchRequest) GetRelationDeep() int32 {
	if x != nil {
		return x.RelationDeep
	}
	return 0
}

func (x *SearchRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SearchRequest) GetExactMatch() bool {
	if x != nil {
		return x.ExactMatch
	}
	return false
}

type TagSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 匹配的key, 支持LIKE匹配
	// @gotags: json:"key"
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	// 匹配符
	// @gotags: json:"opertor"
	Opertor string `protobuf:"bytes,2,opt,name=opertor,proto3" json:"opertor"`
	// 匹配的值
	// @gotags: json:"values"
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values"`
}

func (x *TagSelector) Reset() {
	*x = TagSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSelector) ProtoMessage() {}

func (x *TagSelector) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSelector.ProtoReflect.Descriptor instead.
func (*TagSelector) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{10}
}

func (x *TagSelector) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TagSelector) GetOpertor() string {
	if x != nil {
		return x.Opertor
	}
	return ""
}

func (x *TagSelector) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type UpdateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源id
	// @gotags: json:"id" validate:"required"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" validate:"required"`
	// 资源id
	// @gotags: json:"action"
	Action UpdateAction `protobuf:"varint,2,opt,name=action,proto3,enum=infraboard.cmdb.resource.UpdateAction" json:"action"`
	// 需要添加的资源标签
	// @gotags: json:"tags" validate:"required"
	Tags []*Tag `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags" validate:"required"`
}

func (x *UpdateTagRequest) Reset() {
	*x = UpdateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagRequest) ProtoMessage() {}

func (x *UpdateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagRequest) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTagRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTagRequest) GetAction() UpdateAction {
	if x != nil {
		return x.Action
	}
	return UpdateAction_ADD
}

func (x *UpdateTagRequest) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type QueryTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源id
	// @gotags: json:"resource_ids"
	ResourceIds []string `protobuf:"bytes,1,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids"`
}

func (x *QueryTagRequest) Reset() {
	*x = QueryTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apps_resource_pb_resource_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTagRequest) ProtoMessage() {}

func (x *QueryTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apps_resource_pb_resource_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTagRequest.ProtoReflect.Descriptor instead.
func (*QueryTagRequest) Descriptor() ([]byte, []int) {
	return file_apps_resource_pb_resource_proto_rawDescGZIP(), []int{12}
}

func (x *QueryTagRequest) GetResourceIds() []string {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

var File_apps_resource_pb_resource_proto protoreflect.FileDescriptor

var file_apps_resource_pb_resource_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x70, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2f, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x32, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x4f, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0xb9, 0x03, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0a,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x46, 0x0a,
	0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa2, 0x05, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x38,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x32, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e,
	0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x49, 0x70, 0x22, 0xcd, 0x02, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x3f, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x41, 0x47, 0x5f, 0x50, 0x55,
	0x52, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x3b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09,
	0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x04, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xdb, 0x04, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2e,
	0x70, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x47,
	0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x48, 0x01, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x59, 0x50, 0x45, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x74,
	0x68, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x54, 0x61,
	0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x95, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x34, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x2a, 0x46, 0x0a, 0x06, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x49, 0x59, 0x55, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x48, 0x55, 0x41, 0x57, 0x45, 0x49, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x53,
	0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x41, 0x5a, 0x4f,
	0x4e, 0x10, 0x04, 0x2a, 0xa2, 0x01, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x44, 0x53, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55,
	0x43, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x42, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x49, 0x50, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x4f, 0x4e, 0x47, 0x4f, 0x44, 0x42, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x65, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xc7,
	0x01, 0x12, 0x09, 0x0a, 0x04, 0x42, 0x49, 0x4c, 0x4c, 0x10, 0xc8, 0x01, 0x12, 0x0a, 0x0a, 0x05,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x2a, 0x40, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x09, 0x2a, 0x25, 0x0a, 0x09, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x4e, 0x4f, 0x50, 0x4f, 0x4c, 0x59, 0x10,
	0x01, 0x2a, 0x31, 0x0a, 0x0b, 0x54, 0x41, 0x47, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x10, 0x02, 0x2a, 0x23, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x32, 0xd2, 0x03, 0x0a, 0x03, 0x52, 0x50,
	0x43, 0x12, 0x5b, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x5e,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d,
	0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x58,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63,
	0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x67, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64,
	0x62, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x5b, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2a,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6d, 0x64, 0x62, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x2a,
	0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6d, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_apps_resource_pb_resource_proto_rawDescOnce sync.Once
	file_apps_resource_pb_resource_proto_rawDescData = file_apps_resource_pb_resource_proto_rawDesc
)

func file_apps_resource_pb_resource_proto_rawDescGZIP() []byte {
	file_apps_resource_pb_resource_proto_rawDescOnce.Do(func() {
		file_apps_resource_pb_resource_proto_rawDescData = protoimpl.X.CompressGZIP(file_apps_resource_pb_resource_proto_rawDescData)
	})
	return file_apps_resource_pb_resource_proto_rawDescData
}

var file_apps_resource_pb_resource_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_apps_resource_pb_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_apps_resource_pb_resource_proto_goTypes = []interface{}{
	(VENDOR)(0),                 // 0: infraboard.cmdb.resource.VENDOR
	(TYPE)(0),                   // 1: infraboard.cmdb.resource.TYPE
	(PayMode)(0),                // 2: infraboard.cmdb.resource.PayMode
	(UsageMode)(0),              // 3: infraboard.cmdb.resource.UsageMode
	(TAG_PURPOSE)(0),            // 4: infraboard.cmdb.resource.TAG_PURPOSE
	(UpdateAction)(0),           // 5: infraboard.cmdb.resource.UpdateAction
	(*ResourceSet)(nil),         // 6: infraboard.cmdb.resource.ResourceSet
	(*Resource)(nil),            // 7: infraboard.cmdb.resource.Resource
	(*Meta)(nil),                // 8: infraboard.cmdb.resource.Meta
	(*SharedPolicy)(nil),        // 9: infraboard.cmdb.resource.SharedPolicy
	(*Spec)(nil),                // 10: infraboard.cmdb.resource.Spec
	(*Status)(nil),              // 11: infraboard.cmdb.resource.Status
	(*Tag)(nil),                 // 12: infraboard.cmdb.resource.Tag
	(*TagSet)(nil),              // 13: infraboard.cmdb.resource.TagSet
	(*Cost)(nil),                // 14: infraboard.cmdb.resource.Cost
	(*SearchRequest)(nil),       // 15: infraboard.cmdb.resource.SearchRequest
	(*TagSelector)(nil),         // 16: infraboard.cmdb.resource.TagSelector
	(*UpdateTagRequest)(nil),    // 17: infraboard.cmdb.resource.UpdateTagRequest
	(*QueryTagRequest)(nil),     // 18: infraboard.cmdb.resource.QueryTagRequest
	nil,                         // 19: infraboard.cmdb.resource.Spec.ExtraEntry
	nil,                         // 20: infraboard.cmdb.resource.Tag.MetaEntry
	(*request.PageRequest)(nil), // 21: infraboard.mcube.page.PageRequest
}
var file_apps_resource_pb_resource_proto_depIdxs = []int32{
	7,  // 0: infraboard.cmdb.resource.ResourceSet.items:type_name -> infraboard.cmdb.resource.Resource
	8,  // 1: infraboard.cmdb.resource.Resource.meta:type_name -> infraboard.cmdb.resource.Meta
	10, // 2: infraboard.cmdb.resource.Resource.spec:type_name -> infraboard.cmdb.resource.Spec
	14, // 3: infraboard.cmdb.resource.Resource.cost:type_name -> infraboard.cmdb.resource.Cost
	11, // 4: infraboard.cmdb.resource.Resource.status:type_name -> infraboard.cmdb.resource.Status
	12, // 5: infraboard.cmdb.resource.Resource.tags:type_name -> infraboard.cmdb.resource.Tag
	7,  // 6: infraboard.cmdb.resource.Resource.related_resources:type_name -> infraboard.cmdb.resource.Resource
	3,  // 7: infraboard.cmdb.resource.Meta.usage_mode:type_name -> infraboard.cmdb.resource.UsageMode
	9,  // 8: infraboard.cmdb.resource.Meta.shared_policy:type_name -> infraboard.cmdb.resource.SharedPolicy
	0,  // 9: infraboard.cmdb.resource.Spec.vendor:type_name -> infraboard.cmdb.resource.VENDOR
	1,  // 10: infraboard.cmdb.resource.Spec.resource_type:type_name -> infraboard.cmdb.resource.TYPE
	19, // 11: infraboard.cmdb.resource.Spec.extra:type_name -> infraboard.cmdb.resource.Spec.ExtraEntry
	4,  // 12: infraboard.cmdb.resource.Tag.purpose:type_name -> infraboard.cmdb.resource.TAG_PURPOSE
	20, // 13: infraboard.cmdb.resource.Tag.meta:type_name -> infraboard.cmdb.resource.Tag.MetaEntry
	12, // 14: infraboard.cmdb.resource.TagSet.items:type_name -> infraboard.cmdb.resource.Tag
	2,  // 15: infraboard.cmdb.resource.Cost.pay_mode:type_name -> infraboard.cmdb.resource.PayMode
	21, // 16: infraboard.cmdb.resource.SearchRequest.page:type_name -> infraboard.mcube.page.PageRequest
	3,  // 17: infraboard.cmdb.resource.SearchRequest.usage_mode:type_name -> infraboard.cmdb.resource.UsageMode
	0,  // 18: infraboard.cmdb.resource.SearchRequest.vendor:type_name -> infraboard.cmdb.resource.VENDOR
	1,  // 19: infraboard.cmdb.resource.SearchRequest.type:type_name -> infraboard.cmdb.resource.TYPE
	16, // 20: infraboard.cmdb.resource.SearchRequest.tags:type_name -> infraboard.cmdb.resource.TagSelector
	5,  // 21: infraboard.cmdb.resource.UpdateTagRequest.action:type_name -> infraboard.cmdb.resource.UpdateAction
	12, // 22: infraboard.cmdb.resource.UpdateTagRequest.tags:type_name -> infraboard.cmdb.resource.Tag
	6,  // 23: infraboard.cmdb.resource.RPC.PutResource:input_type -> infraboard.cmdb.resource.ResourceSet
	6,  // 24: infraboard.cmdb.resource.RPC.DeleteResource:input_type -> infraboard.cmdb.resource.ResourceSet
	15, // 25: infraboard.cmdb.resource.RPC.Search:input_type -> infraboard.cmdb.resource.SearchRequest
	18, // 26: infraboard.cmdb.resource.RPC.QueryTag:input_type -> infraboard.cmdb.resource.QueryTagRequest
	17, // 27: infraboard.cmdb.resource.RPC.UpdateTag:input_type -> infraboard.cmdb.resource.UpdateTagRequest
	6,  // 28: infraboard.cmdb.resource.RPC.PutResource:output_type -> infraboard.cmdb.resource.ResourceSet
	6,  // 29: infraboard.cmdb.resource.RPC.DeleteResource:output_type -> infraboard.cmdb.resource.ResourceSet
	6,  // 30: infraboard.cmdb.resource.RPC.Search:output_type -> infraboard.cmdb.resource.ResourceSet
	13, // 31: infraboard.cmdb.resource.RPC.QueryTag:output_type -> infraboard.cmdb.resource.TagSet
	7,  // 32: infraboard.cmdb.resource.RPC.UpdateTag:output_type -> infraboard.cmdb.resource.Resource
	28, // [28:33] is the sub-list for method output_type
	23, // [23:28] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_apps_resource_pb_resource_proto_init() }
func file_apps_resource_pb_resource_proto_init() {
	if File_apps_resource_pb_resource_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apps_resource_pb_resource_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apps_resource_pb_resource_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apps_resource_pb_resource_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_apps_resource_pb_resource_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apps_resource_pb_resource_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apps_resource_pb_resource_proto_goTypes,
		DependencyIndexes: file_apps_resource_pb_resource_proto_depIdxs,
		EnumInfos:         file_apps_resource_pb_resource_proto_enumTypes,
		MessageInfos:      file_apps_resource_pb_resource_proto_msgTypes,
	}.Build()
	File_apps_resource_pb_resource_proto = out.File
	file_apps_resource_pb_resource_proto_rawDesc = nil
	file_apps_resource_pb_resource_proto_goTypes = nil
	file_apps_resource_pb_resource_proto_depIdxs = nil
}
